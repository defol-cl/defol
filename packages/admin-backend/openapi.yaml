#v2.1
openapi: 3.0.0
info:
  version: 1.0.0
  title: defol-admin-backend
  description: Especificación del backend de DEFOL

x-amazon-apigateway-request-validators:
  body:
    validateRequestParameters: false
    validateRequestBody: true
  params:
    validateRequestParameters: true
    validateRequestBody: false
  all:
    validateRequestParameters: true
    validateRequestBody: true

security:
  - CUPAuthorizer: []

paths:
  /convenios:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConveniosGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          #dejar de usar grupos y usar permisos (definir nombres de permisos para usarlos aca)
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email",
              "groups": "$context.authorizer.claims.groups"
            }
        responses:
          default:
            statusCode: 200
          ".*CONVENIOS_GET_ERROR.*":
            statusCode: 500
      summary: obtiene el listado de convenios
      tags:
        - convenio
      responses:
        200:
          $ref: "#/components/responses/200ConvenioList"
        500:
          description: error al obtener convenios desde dynamo
    post:
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConveniosPost.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email",
              "convenio": $input.json('$')
            }
        responses:
          default:
            statusCode: 201
          ".*CONVENIOS_POST_FAILED.*":
            statusCode: 400
          ".*CONVENIOS_POST_ERROR.*":
            statusCode: 500
      summary: permite crear convenios
      tags:
        - convenio
      requestBody:
        description: codigo, nombre y fecha de vencimiento de convenio
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cod:
                  type: string
                nombre:
                  type: string
                fechaVencimiento:
                  type: string
              required: [cod, nombre, fechaVencimiento]
      responses:
        201:
          description: OK
        400:
          description: el convenio ya existe
        500:
          description: error al ejecutar lambda

  /preguntas:
    get:
      x-amazon-apigateway-request-validator: params
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreguntasGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email",
              "ejecutivo": "$input.params('ejecutivo')",
              "estado": "$input.params('estado')",
              "token": "$input.params('token')"
            }
        responses:
          default:
            statusCode: 200
          ".*PREGUNTAS_GET_ERROR.*":
            statusCode: 500
      summary: obtiene el listado de preguntas
      tags:
        - pregunta
      parameters:
        - in: query
          name: estado
          description: estado de la pregunta
          schema:
            type: string
            example: "INGRESADA,REPLICADA"
        - in: query
          name: ejecutivo
          description: correo ejecutivo
          schema:
            type: string
            example: "hola@hola.cl"
        - in: query
          name: token
          description: token de paginación
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/200PreguntaList"
        500:
          description: error al obtener preguntas desde dynamo

  /pregunta:
    get:
      x-amazon-apigateway-request-validator: params
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreguntaDetailGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email",
              "contactoEmail": "$input.params('contactoEmail')",
              "timestamp": "$input.params('timestamp')"
            }
        responses:
          default:
            statusCode: 200
          ".*PREGUNTA_DETAIL_GET_NOT_FOUND.*":
            statusCode: 404
          ".*PREGUNTA_DETAIL_GET_ERROR.*":
            statusCode: 500
      summary: obtiene el detalle de una pregunta
      tags:
        - pregunta
      parameters:
        - in: query
          name: contactoEmail
          required: true
          description: correo de contacto
          schema:
            type: string
            example: "hola@hola.com"
        - in: query
          name: timestamp
          required: true
          description: fecha de creacion de pregunta
          schema:
            type: string
            example: "2022-10-20T10:00:00.000Z"
      responses:
        200:
          $ref: "#/components/responses/200PreguntaDetail"
        404:
          description: no se encontró la pregunta
        500:
          description: error al obtener preguntas desde dynamo
    put:
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReplicaPut.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            #set($surname = "$context.authorizer.claims.given_name")
            #set($lastname = "$context.authorizer.claims.family_name")
            {
              "usrId": "$context.authorizer.claims.email",
              "contacto": "$surname $lastname",
              "contactoEmail": "$input.params('contactoEmail')",
              "timestamp": "$input.params('timestamp')",
              "replica": $input.json('$.replica'),
              "agregarReplica": $input.json('$.agregarReplica')
            }
        responses:
          default:
            statusCode: 204
          ".*PREGUNTA_PUT_FAILED.*":
            statusCode: 400
          ".*PREGUNTA_PUT_ERROR.*":
            statusCode: 500
      summary: obtiene el detalle de una pregunta
      tags:
        - pregunta
      parameters:
        - in: query
          name: contactoEmail
          required: true
          description: correo de contacto
          schema:
            type: string
            example: "hola@hola.com"
        - in: query
          name: timestamp
          required: true
          description: fecha de creacion de pregunta
          schema:
            type: string
            example: "2022-10-20T10:00:00.000Z"
      requestBody:
        description: replica de la pregunta
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replica:
                  type: string
                agregarReplica:
                  type: boolean
              required: [replica]
      responses:
        204:
          description: replica creada con éxito
        400:
          description: request inválido
        500:
          description: error al obtener preguntas desde dynamo

  /usuarios:
    post:
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsuariosPost.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email",
              "convenioCod": $input.json('$.convenioCod'),
              "emails": $input.json('$.correos'),
              "preguntasMax": $input.json('$.preguntasMax')
            }
        responses:
          default:
            statusCode: 201
          ".*USUARIOS_POST_ERROR.*":
            statusCode: 500
      summary: permite crear y asociar usuarios a convenios
      tags:
        - usuario
      requestBody:
        description: convenio y correo de usuarios
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                convenioCod:
                  type: string
                correos:
                  type: string
                preguntasMax:
                  type: number
              required: [convenioCod, correos, preguntasMax]
      responses:
        201:
          description: usuarios creados
        500:
          description: ocurrió un error al intentar crear un usuario

components:
  schemas:
    InteraccionPreguntas:
      title: InteraccionPreguntas
      type: object
      properties:
        pregunta:
          type: string
        preguntaAt:
          type: string
        replica:
          type: string
        replicaAt:
          type: string
        ejecutivoNombre:
          type: string
        ejecutivoEmail:
          type: string
    Pregunta:
      title: Pregunta
      description: información de una pregunta
      type: object
      properties:
        convenioCod:
          type: string
        contactoNombre:
          type: string
        contactoEmail:
          type: string
        estado:
          type: string
        interacciones:
          type: array
          items:
            $ref: "#/components/schemas/InteraccionPreguntas"
        interaccionesCantidad:
          type: number
        interaccionesMax:
          type: number
        timestamp:
          type: number
        titulo:
          type: string
        antecedentes:
          type: string
        pregunta:
          type: string
        username:
          type: string
        fechaActualizacion:
          type: string
        fechaUltimoAcceso:
          type: string
        categoria:
          type: string
        ejecutivoEmail:
          type: string
    Convenio:
      title: Convenio
      description: información de un convenio
      type: object
      properties:
        cod:
          type: string
        nombre:
          type: string
        fechaVencimiento:
          type: string
      example:
        cod: "CMX1"
        nombre: "Convenio Marco"
        fechaVencimiento: "2022-01-01"
  responses:
    200ConvenioList:
      description: Listado de convenios
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Convenio"
    200PreguntaDetail:
      description: Detalle de una pregunta
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pregunta"
             
    200PreguntaList:
      description: Listado de preguntas
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Pregunta"
              token:
                type: string
            required: [items]

  securitySchemes:
    CUPAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - Fn::Sub: ${CognitoUserPool}
        type: cognito_user_pools
