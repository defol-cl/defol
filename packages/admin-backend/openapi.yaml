#v2
openapi: 3.0.0
info:
  version: 1.0.0
  title: defol-admin-backend
  description: Especificación del backend de DEFOL

x-amazon-apigateway-request-validators:
  body:
    validateRequestParameters: false
    validateRequestBody: true
  params:
    validateRequestParameters: true
    validateRequestBody: false
  all:
    validateRequestParameters: true
    validateRequestBody: true

security:
  - CUPAuthorizer: []

paths:
  /convenios:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConveniosGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email",
              "groups": "$context.authorizer.claims.groups"
            }
        responses:
          default:
            statusCode: 200
          ".*CONVENIOS_GET_ERROR.*":
            statusCode: 500
      summary: obtiene el listado de convenios
      tags:
        - convenio
      responses:
        200:
          $ref: "#/components/responses/200ConvenioList"
        500:
          description: error al obtener convenios desde dynamo
    post:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConveniosPost.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email",
              "convenio": $input.json('$')
            }
        responses:
          default:
            statusCode: 201
          ".*CONVENIOS_POST_FAILED.*":
            statusCode: 400
          ".*CONVENIOS_POST_ERROR.*":
            statusCode: 500
      summary: permite crear convenios
      tags:
        - convenio
      requestBody:
        description: codigo, nombre y fecha de vencimiento de convenio
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cod:
                  type: string
                nombre:
                  type: string
                fechaVencimiento:
                  type: string
      responses:
        201:
          description: OK
        400:
          description: el convenio ya existe
        500:
          description: error al ejecutar lambda

  /preguntas:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreguntasGet.Arn}/invocations
        httpMethod: POST
        type: aws
        responses:
          default:
            statusCode: 200
      summary: obtiene el listado de preguntas
      responses:
        200:
          description: listado de preguntas

components:
  schemas:
    Convenio:
      title: Convenio
      description: información de un convenio
      type: object
      properties:
        cod:
          type: string
        nombre:
          type: string
        fechaVencimiento:
          type: string
      example:
        cod: "CMX1"
        nombre: "Convenio Marco"
        fechaVencimiento: "2022-01-01"
  responses:
    200ConvenioList:
      description: Listado de convenios
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Convenio"

  securitySchemes:
    CUPAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - Fn::Sub: ${CognitoUserPool}
        type: cognito_user_pools
