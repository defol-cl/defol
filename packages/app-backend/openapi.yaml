#v2
openapi: 3.0.0
info:
  version: 1.0.0
  title: defol-app-backend
  description: Especificación del backend de DEFOL

x-amazon-apigateway-request-validators:
  body:
    validateRequestParameters: false
    validateRequestBody: true
  params:
    validateRequestParameters: true
    validateRequestBody: false
  all:
    validateRequestParameters: true
    validateRequestBody: true

security:
  - CUPAuthorizer: []

paths:
  /preguntas:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreguntasGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email"
            }
        responses:
          default:
            statusCode: 200
          ".*PREGUNTAS_GET_ERROR.*":
            statusCode: 500
      summary: obtiene el listado de preguntas
      tags:
        - pregunta
      responses:
        200:
          description: listado de preguntas
    post:
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreguntasPost.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            #set($surname = "$context.authorizer.claims.given_name")
            #set($lastname = "$context.authorizer.claims.family_name")
            {
              "usrId": "$context.authorizer.claims.email",
              "contacto": "$surname $lastname",
              "titulo": $input.json('$.titulo'),
              "antecedentes": $input.json('$.antecedentes'),
              "convenioCod": $input.json('$.convenioCod'),
              "pregunta": $input.json('$.pregunta')
            }
        responses:
          default:
            statusCode: 201
          ".*PREGUNTAS_POST_FAILED.*":
            statusCode: 400
          ".*PREGUNTAS_POST_ERROR.*":
            statusCode: 500
      summary: permite crear preguntas
      tags:
        - pregunta
      requestBody:
        description: codigo de convenio y pregunta
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                antecedentes:
                  type: string
                convenioCod:
                  type: string
                pregunta:
                  types: string
              required: [titulo, antecedentes, convenioCod, pregunta]
      responses:
        201:
          description: OK
        400:
          description: se alcanzó el límite de preguntas
        500:
          description: error al ejecutar lambda
    put:
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreguntasPut.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            #set($surname = "$context.authorizer.claims.given_name")
            #set($lastname = "$context.authorizer.claims.family_name")
            {
              "usrId": "$context.authorizer.claims.email",
              "contacto": "$surname $lastname",
              "timestamp": $input.json('$.timestamp'),
              "pregunta": $input.json('$.pregunta')
            }
        responses:
          default:
            statusCode: 204
          ".*PREGUNTAS_PUT_NOT_FOUND.*":
            statusCode: 404
          ".*PREGUNTAS_PUT_ERROR.*":
            statusCode: 500
      summary: permite actualizar preguntas
      tags:
        - pregunta
      requestBody:
        description: codigo de convenio y pregunta
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pregunta:
                  types: string
                timestamp:
                  types: string
              required: [pregunta, timestamp]
      responses:
        204:
          description: OK
        404:
          description: no se encontró la pregunta
        500:
          description: error al ejecutar lambda
  /dashboard/resumen-preguntas:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumenPreguntasGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email"
            }
        responses:
          default:
            statusCode: 200
          ".*RESUMEN_PREGUNTAS_GET_ERROR.*":
            statusCode: 500
      summary: obtiene la cantidad de preguntas realizadas, pendientes y replicas realizadas por un usuario
      tags:
        - dashboard
      responses:
        200:
          $ref: "#/components/responses/200ResumenPreguntas"
        500:
          description: error al ejecutar lambda

  /dashboard/ultimas-actualizaciones:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UltimasActualizacionesGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email"
            }
        responses:
          default:
            statusCode: 200
          ".*ULTIMAS_ACTUALIZACIONES_GET_ERROR.*":
            statusCode: 500
      summary: obtiene las 5 últimas actualizaciones sobre preguntas de un usuario
      tags:
        - dashboard
      responses:
        200:
          $ref: "#/components/responses/200UltimasActualizaciones"
        500:
          description: error al ejecutar lambda
  /convenios:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConveniosGet.Arn}/invocations
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json: |
            {
              "usrId": "$context.authorizer.claims.email"
            }
        responses:
          default:
            statusCode: 200
          ".*CONVENIOS_GET_ERROR.*":
            statusCode: 500
      summary: obtiene el listado de convenios
      tags:
        - convenio
      responses:
        200:
          $ref: "#/components/responses/200ConvenioList"
        500:
          description: error al obtener convenios desde dynamo

components:
  schemas:
    InteraccionPreguntas:
      title: InteraccionPreguntas
      type: object
      properties:
        pregunta:
          type: string
        preguntaAt:
          type: string
        replica:
          type: string
        replicaAt:
          type: string
        ejecutivoNombre:
          type: string
        ejecutivoEmail:
          type: string
    Pregunta:
      title: Pregunta
      description: información de una pregunta
      type: object
      properties:
        convenioCod:
          type: string
        contactoNombre:
          type: string
        contactoEmail:
          type: string
        estado:
          type: string
        interacciones:
          type: array
          items:
            $ref: "#/components/schemas/InteraccionPreguntas"
        interaccionesCantidad:
          type: number
        interaccionesMax:
          type: number
        timestamp:
          type: number
        titulo:
          type: string
        antecedentes:
          type: string
        pregunta:
          type: string
        username:
          type: string
        fechaActualizacion:
          type: string
        fechaUltimoAcceso:
          type: string
        cantReplicas:
          type: number
        categoria:
          type: string
        ejecutivoEmail:
          type: string
    Convenio:
      title: Convenio
      description: información de un convenio
      type: object
      properties:
        cod:
          type: string
        nombre:
          type: string
        fechaVencimiento:
          type: string
        limitePreguntas:
          type: number
        preguntasRealizadas:
          type: number
      example:
        cod: "CMX1"
        nombre: "Convenio Marco"
        fechaVencimiento: "2022-01-01"
        limitePreguntas: 5
        preguntasRealizadas: 3
    ResumenPreguntas:
      title: ResumenPreguntas
      description: cantidad de preguntas por cada estado
      type: object
      properties:
        totalPreguntasPendientes:
          type: number
        totalPreguntasRealizadas:
          type: number
        totalReplicasPendientes:
          type: number
      example:
        totalPreguntasPendientes: 10
        totalPreguntasRealizadas: 20
        totalReplicasPendientes: 2
  responses:
    200ConvenioList:
      description: Listado de convenios
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Convenio"
    200ResumenPreguntas:
      description: Cantidad de preguntas por cada estado
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResumenPreguntas"
    200UltimasActualizaciones:
      description: Entrega las ultimas 5 preguntas de un usuario según su fecha de actualizacion (DESC)
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Pregunta"

  securitySchemes:
    CUPAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - Fn::Sub: ${CognitoUserPool}
        type: cognito_user_pools
